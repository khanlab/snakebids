app_full_name:
  type: str
  help: What is the name of your app?
  validator: >-
    {% if not (app_full_name | regex_search("^[a-zA-Z_][a-zA-Z_0-9]*$")) -%}
    Name must be a valid python module name
    {%- elif not app_full_name -%}
    Required
    {%- endif %}

full_name:
  type: str
  help: What is your name?
  default: '{% gitconfig "user.name" %}'

email_regex:
  default: ^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$
  when: false

email:
  type: str
  help: What is your email?
  default: '{% gitconfig "user.email" %}'
  validator: >-
    {% if email and not (email | regex_search(email_regex, ignorecase=True)) %}
    Must be a valid email
    {% endif %}

github:
  type: str
  help: What is your github username?

app_description:
  type: str
  help: Provide a brief description of your app

app_version:
  default: "0.1.0"
  help: Starting version number for your app
  validator: '{% if not app_version %}Required{% endif %}'

build_system:
  help: >
    What build system would you like to use? If unsure, choose setuptools
  choices:
    - setuptools
    - poetry
    - hatch
    - flit

# Flit and setuptools requires specifying license via Trove classifiers; too
# complicated to get via interactive prompt
license:
  default: >-
    {% if build_system != "flit" and build_system != "setuptools" %}MIT{% endif %}
  help: Usage license for your app
  when: "{{ build_system != 'flit' and build_system != 'setuptools' }}"

create_doc_template:
  type: bool
  help: Would you to set up basic documentation?

bids_version:
  default: "1.8.0"
  when: false

python_version:
  default: ">=3.8,<3.12"
  when: false

snakebids_version:
  default: "{{ snakebids_version or '0.9.3' }}"
  when: false

snakemake_version:
  default: "7.20"
  when: false

name_slug:
  default: "{{ app_full_name|lower|replace(' ', '_')|replace('-', '_') }}"
  when: false

test_run_cmd:
  default: "{{ name_slug }} tests/data tests/result participant -c1"
  when: false

_message_after_copy: >
  Snakebids project successfully created in
  {{ Fore.GREEN }}{{ _copier_conf.dst_path }}{{ Fore.RESET }}


  Just a few steps before coding:


  {{ Fore.BLUE }}1.{{ Fore.RESET }} Change into the project directory:

    $ cd {{ _copier_conf.dst_path }}

  {% if build_system == "poetry" -%}
  {{ Fore.BLUE }}2.{{ Fore.RESET }} Install dependencies.

    $ poetry install

  {%- else -%}
  {{ Fore.BLUE + "2." + Fore.RESET + """ Install dependencies. This may vary
  depending on your tooling. The following are examples (the first example
  should work on any python environment; the others require 3rd party tools):
  """ | wordwrap(80)}}

    * {{Fore.YELLOW}}Virtual Environment and setuptools:{{Fore.RESET}}
      $ python -m venv .venv
      $ source .venv/bin/activate
      $ pip install .

    * {{Fore.YELLOW}}Hatch:{{Fore.RESET}}
      $ hatch env create

    * {{Fore.YELLOW}}PDM:{{Fore.RESET}}
      $ pdm install
  {%- endif %}


  {{ Fore.BLUE }}3.{{Fore.RESET }} Perform a test run.

  {% if build_system == "poetry" %}
    $ poetry run {{ test_run_cmd }}

  {%- else %}
    * {{Fore.YELLOW}}Virtual Environment and setuptools:{{Fore.RESET}}
      $ {{ test_run_cmd }}

    * {{Fore.YELLOW}}Hatch:{{Fore.RESET}}
      $ hatch env run -- {{ test_run_cmd }}

    * {{Fore.YELLOW}}PDM:{{Fore.RESET}}
      $ pdm run {{ test_run_cmd }}
  {%- endif %}

_jinja_extensions:
  - jinja2_time.TimeExtension
  - snakebids.jinja2_ext.vcs.GitConfigExtension
  - snakebids.jinja2_ext.colorama.ColoramaExtension
  - snakebids.jinja2_ext.toml_encode.TomlEncodeExtension
  - snakebids.jinja2_ext.snakebids_version.SnakebidsVersionExtension
