[tool.poetry]
name = "snakebids"
version = "0.0.0"
description = "BIDS integration into snakemake workflows"
readme = "README.md"
repository = "https://github.com/khanlab/snakebids"
documentation = "https://snakebids.readthedocs.io/"
authors = [
    "Ali Khan <alik@robarts.ca>",
    "Peter Van Dyken <pvandyk2@uwo.ca>",
    "Tristan Kuehn <tkuehn@uwo.ca>",
    "Jason Kai <tkai@uwo.ca>",
]
license = "MIT"
packages = [{ include = "snakebids" }]
exclude = ["snakebids/tests/**"]

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
dirty = true
style = "pep440"
bump = true

[tool.poetry-dynamic-versioning.substitution]
files = ['snakebids/__init__.py']
patterns = [
    "(^\\s+\"snakebids_version\":\\s*\")[^'\"]*(\")",
    "(^__version__\\s*(?::.*?)?=\\s*['\"])[^'\"]*(['\"])",
]

[tool.poetry.dependencies]
# upper cap imposed by pytest-split
python = ">=3.8,<4.0"
# core dep with high breakage potential given plans for redesign, so
# keep upper limit
pybids = ">=0.16.0,<0.17"
snakemake = [
    { version = ">=5.28.0,<8", python = ">=3.8" },
    { version = ">=7.18.2,<8", python = ">=3.11" },
]
typing-extensions = ">=3.10.0"
attrs = ">=21.2.0"
boutiques = "^0.5.25"
more-itertools = ">=8"
# package developed in complete tandem with snakebids, so no need for a range
pvandyken-deprecated = "0.0.4"
# Need this until py39
importlib-resources = ">=5.12.0"

#  Below are non-direct dependencies (i.e. dependencies of other depenencies)
#  specified to ensure a version with a pre-built wheel is installed depending
#  on the python version being used.
numpy = [
    { version = "<=1.24.4", python = "<3.9" },
    { version = ">=1.23.2", python = ">=3.11" },
]
# Use minimum of 1.10.0 because of security vulnerability
scipy = [
    { version = ">=1.10.0,<=1.10.1", python = "<3.9" },
    { version = ">=1.10.0", python = ">=3.9" },
]
pandas = [
    { version = "<=2.0.3", python = "<3.9" },
    { version = ">=2.1.1", python = ">=3.12" },
]
# minimum 8.2.0 to use post-copy mesages
copier = ">=8.2.0"
jinja2-time = ">=0.2.0"
# minimum 2.31.0 because of security vulnerability
requests = ">=2.31.0"
ruamel-yaml = ">=0.17.2"
lazy-loader = ">=0.3"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-mock = "^3.7.0"
poethepoet = "^0.24.0"
pre-commit = "^3.0.0"
# need custom fork of mkinit to handle .pyi files. PR to main repo pending
# a mkinit dep has the 'platform_system == "Windows"' as a marker on an incompatible dependeny
#   (pydantic<2.0 cf copier), so set the inverse as a marker here so mkinit can
#   still be resolved
mkinit = { version="^1.1.0", markers = "platform_system != 'Windows'" }
hypothesis = "^6.34.1"
pytest-benchmark = "^4.0.0"
pyfakefs = "^5.1.0"
pyparsing = "^3.0.9"
pathvalidate = "^3.0.0"
pyright = "^1.1.339"
ruff = "^0.1.7"
pytest-xdist = "^3.3.1"
pytest-split = "^0.8.1"
tomli = "^2.0.1"
requests-mock = "^1.11.0"
pytest-cov = "^4.1.0"
docstring-parser = "^0.15"


[tool.poetry.group.docs.dependencies]
sphinx = "^7"
sphinx-argparse = "^0.4.0"
sphinxcontrib-asciinema = "^0.3.8"
myst-parser = "^2.0.0"
furo = "^2023.9.10"
sphinx-copybutton = "^0.5.2"
sphinx-reredirects = "^0.1.3"
sphinx-design = "^0.5.0"
sphinx-autobuild = "^2021.3.14"

[tool.poetry.scripts]
snakebids = "snakebids.admin:main"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poe.tasks]
setup = "pre-commit install"
sort.cmd = "ruff check --fix --select I001 $path"
sort.args = [
    { name = "path", default = "snakebids scripts", positional = true },
]
fmt.cmd = "ruff format $path"
fmt.args = [
    { name = "path", default = "snakebids scripts", positional = true },
]

ruff = "ruff check snakebids scripts"

pyright = "pyright snakebids scripts"
quality = ["fmt", "ruff", "pyright"]
fix = ["fmt", "ruff --fix"]
test = """
pytest --doctest-modules --ignore=docs \
    --ignore=snakebids/project_template --benchmark-disable
"""
benchmark = "pytest --benchmark-only --benchmark-autosave"
docs = "sphinx-autobuild docs build/docs --watch snakebids -W"

[[tool.poe.tasks.update-bids.sequence]]
script = "scripts.update_bids:main"
[[tool.poe.tasks.update-bids.sequence]]
ref = "mkinit"
[[tool.poe.tasks.update-bids.sequence]]
ref = "fmt"

[[tool.poe.tasks.mkinit.sequence]]
cmd = "mkinit --recursive --nomods --lazy_loader_typed --relative -i snakebids"
[[tool.poe.tasks.mkinit.sequence]]
ref = "sort snakebids/**/__init__.py*"
[[tool.poe.tasks.mkinit.sequence]]
ref = "fmt snakebids/**/__init__.py*"

[tool.poe.tasks._get_version]
imports = ["platform"]
expr = "platform.python_version()"

[tool.poe.tasks.build-container]
args = [{ name = "container_id", positional = true, required = true }]
uses = { VERSION = "_get_version" }
cmd = """
    docker build "containers/${container_id}" \
        --tag "snakebids/${container_id}:${VERSION}" \
        --build-arg="PYTHON_VERSION=${VERSION}"
"""

[tool.pytest.ini_options]
markers = [
    "docker: marks tests as requiring docker (deselect with '-m \"not docker\"')",
]

[tool.coverage.run]
omit = ["snakebids/project_template/**", "snakebids/tests/**"]

[tool.coverage.report]
exclude_also = [
    "@overload",
    'class [a-zA-Z0-9_]+\([^)]*Protocol.*\)',
    'if TYPE_CHECKING',
    "def __dir__",
    '@(abc\.)abstractmethod'
]

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.pyright]
include = ["snakebids"]
exclude = ["snakebids/project_template", "typings"]
typeCheckingMode = "strict"
reportPrivateUsage = false
reportImportCycles = false

[tool.ruff]
select = [
    "E",   # pycodestyle error
    "W",   # pycodestyle warning
    "F",   # pyflakes
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    # We use os.path a lot in "legitimate" ways, so this ruleset has too many
    # false positives
    # "PTH",  # flake8-use-pathlib
    "TRY",  # tryceratops
    "FLY",  # flynt
    "D",    # pydocstyle
    "PL",   # pylint
    "RUF",  # ruff
    "T100", # debugger
    "I",    # isort
    # Other perf rules give more false positives than benefits
    "PERF101", # do not cast iterable to list
]
ignore = [
    "PLR0913",
    "D105",    # missing docstring in magic method
    "D100",    # Require docstring in public modules
    "D104",    # Require docstring in public packages
    "S603",    # Subprocess without shell equals true
    "S607",    # start-process-with-partial-path
    # recommended ignores for ruff format
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "COM812",
    "COM819",
    "ISC001",
    "ISC002",
]


target-version = "py38"

namespace-packages = ["snakebids/plugins"]

[tool.ruff.per-file-ignores]
"snakebids/project_template/**" = ["N999"]
"snakebids/tests/**" = [
    "D",
    "S101", # assert
    "S307", # Use of eval
    "SLF",
]

[tool.ruff.pydocstyle]
convention = "numpy"
ignore-decorators = ["snakebids.utils.utils.property_alias"]

[tool.ruff.flake8-builtins]
builtins-ignorelist = ["filter"]

[tool.ruff.flake8-import-conventions.extend-aliases]
itertools = "it"
functools = "ft"
operator = "op"
subprocess = "sp"
importlib_resources = "impr"
"importlib.resources" = "impr"
"importlib.metadata" = "impm"
more_itertools = "itx"
"hypothesis.strategies" = "st"
"snakebids.tests.strategies" = "sb_st"
"snakebids.utils.sb_itertools" = "sb_it"

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
