Workflows
=========

Snakebids workflows are constructed the same way as any other `Snakemake workflows <https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html>`_, but with a few additions that make it easier to work with BIDS datasets.

To get access to these additions, the base Snakefile for a snakebids workflow should begin with the following boilerplate::

    import snakebids
    from snakebids import bids

    configfile: 'config/snakebids.yml'

    # Get input wildcards
    inputs = snakebids.generate_inputs(
        bids_dir=config["bids_dir"],
        pybids_inputs=config["pybids_inputs"],
        derivatives=config.get("derivatives", None),
        participant_label=config.get("participant_label", None),
        exclude_participant_label=config.get("exclude_participant_label", None)

    )

    #this adds constraints to the bids naming
    wildcard_constraints:  **snakebids.get_wildcard_constraints(config)

Snakebids workflow features
---------------------------

The :py:func:`snakebids.bids()` function generates a properly-formatted BIDS filename with the specified entities, as documented in more detail elsewhere in this documentation.

:py:func:`snakebids.generate_inputs` returns an instance of :py:class:`snakebids.BidsDataset`, which contains a number attributes to assist processing a BIDS dataset with snakemake. It should be called at the beginning of the workflow and assigned to a variable called ``inputs``.

The ``path`` member of :py:class:`snakebids.BidsDataset` is generated by snakebids and contains a list of matched files for every input type. Often, the first rule to be invoked will use one or more entries in ``inputs.path`` as the input file specification.

The ``zip_lists`` member of :py:class:`snakebids.BidsDataset` is used with the :py:func:`bids <snakebids.bids>` function to fill the wildcards with corresponding values from input files. The usage pattern is as follows::

    expand(
        bids(
            root="results",
            datatype="func",
            suffix="bold.nii.gz",
            **inputs.wildcards["bold"]
        ),
        zip,
        **inputs.zip_lists["bold"]
    )

The ``wildcards`` member of :py:class:`snakebids.BidsDataset` is generated by snakebids and contains a dictionary mapping the wildcards for each input type to snakemake-formatted wildcards, for convenient use in the ``bids`` function.

The ``layout`` member gives access to the underlying :py:class:`BIDSLayout <bids.layout.BIDSLayout>`, which can be used to access advanced pybids features not covered by ``snakebids``. Note that if ``custom_paths`` are specified for every :py:class:`BidsComponent <snakebids.BidsComponent>`, pybids indexing will be skipped and ``layout`` will be set to ``None``. If your workflow relies on accessing this ``layout``, you must ensure your users do not provide a ``custom_path`` for every single component, either in the config file or :ref:`via the CLI <running overview>` (``--path_{component}``).
