"""
This type stub file was generated by pyright.
"""

if False: ...
SHOW_LINES = ...

def CommentCheck() -> None: ...

class Event:
    __slots__ = ...
    crepr = ...
    def __init__(
        self, start_mark: Any = ..., end_mark: Any = ..., comment: Any = ...
    ) -> None: ...
    def __repr__(self) -> Any: ...
    def compact_repr(self) -> str: ...

class NodeEvent(Event):
    __slots__ = ...
    def __init__(
        self,
        anchor: Any,
        start_mark: Any = ...,
        end_mark: Any = ...,
        comment: Any = ...,
    ) -> None: ...

class CollectionStartEvent(NodeEvent):
    __slots__ = ...
    def __init__(
        self,
        anchor: Any,
        tag: Any,
        implicit: Any,
        start_mark: Any = ...,
        end_mark: Any = ...,
        flow_style: Any = ...,
        comment: Any = ...,
        nr_items: Optional[int] = ...,
    ) -> None: ...
    @property
    def tag(self) -> Optional[str]: ...

class CollectionEndEvent(Event):
    __slots__ = ...

class StreamStartEvent(Event):
    __slots__ = ...
    crepr = ...
    def __init__(
        self,
        start_mark: Any = ...,
        end_mark: Any = ...,
        encoding: Any = ...,
        comment: Any = ...,
    ) -> None: ...

class StreamEndEvent(Event):
    __slots__ = ...
    crepr = ...

class DocumentStartEvent(Event):
    __slots__ = ...
    crepr = ...
    def __init__(
        self,
        start_mark: Any = ...,
        end_mark: Any = ...,
        explicit: Any = ...,
        version: Any = ...,
        tags: Any = ...,
        comment: Any = ...,
    ) -> None: ...
    def compact_repr(self) -> str: ...

class DocumentEndEvent(Event):
    __slots__ = ...
    crepr = ...
    def __init__(
        self,
        start_mark: Any = ...,
        end_mark: Any = ...,
        explicit: Any = ...,
        comment: Any = ...,
    ) -> None: ...
    def compact_repr(self) -> str: ...

class AliasEvent(NodeEvent):
    __slots__ = ...
    crepr = ...
    def __init__(
        self,
        anchor: Any,
        start_mark: Any = ...,
        end_mark: Any = ...,
        style: Any = ...,
        comment: Any = ...,
    ) -> None: ...
    def compact_repr(self) -> str: ...

class ScalarEvent(NodeEvent):
    __slots__ = ...
    crepr = ...
    def __init__(
        self,
        anchor: Any,
        tag: Any,
        implicit: Any,
        value: Any,
        start_mark: Any = ...,
        end_mark: Any = ...,
        style: Any = ...,
        comment: Any = ...,
    ) -> None: ...
    @property
    def tag(self) -> Optional[str]: ...
    @tag.setter
    def tag(self, val: Any) -> None: ...
    def compact_repr(self) -> str: ...

class SequenceStartEvent(CollectionStartEvent):
    __slots__ = ...
    crepr = ...
    def compact_repr(self) -> str: ...

class SequenceEndEvent(CollectionEndEvent):
    __slots__ = ...
    crepr = ...

class MappingStartEvent(CollectionStartEvent):
    __slots__ = ...
    crepr = ...
    def compact_repr(self) -> str: ...

class MappingEndEvent(CollectionEndEvent):
    __slots__ = ...
    crepr = ...
